package com.wonginnovations.arcana.client.render.entities;import com.mojang.blaze3d.vertex.PoseStack;import com.mojang.blaze3d.vertex.VertexConsumer;import com.mojang.math.Axis;import com.wonginnovations.arcana.Arcana;import com.wonginnovations.arcana.ArcanaConfig;import com.wonginnovations.arcana.aspects.Aspects;import com.wonginnovations.arcana.blocks.entities.AspectBookshelfBlockEntity;import com.wonginnovations.arcana.items.PhialItem;import net.minecraft.client.Minecraft;import net.minecraft.client.renderer.MultiBufferSource;import net.minecraft.client.renderer.RenderType;import net.minecraft.client.renderer.blockentity.BlockEntityRendererProvider;import net.minecraft.client.renderer.texture.TextureAtlas;import net.minecraft.client.renderer.texture.TextureAtlasSprite;import net.minecraft.client.renderer.blockentity.BlockEntityRenderer;import net.minecraft.core.Direction;import net.minecraft.resources.ResourceLocation;import net.minecraftforge.api.distmarker.Dist;import net.minecraftforge.api.distmarker.OnlyIn;import org.joml.Quaternionf;import javax.annotation.Nonnull;import java.awt.*;import static com.wonginnovations.arcana.blocks.AspectBookshelfBlock.FULL_SIZE;@OnlyIn(Dist.CLIENT)public class AspectBookshelfBlockEntityRenderer implements BlockEntityRenderer<AspectBookshelfBlockEntity> {    public static final ResourceLocation PHIAL_LID = new ResourceLocation(Arcana.MODID, "block/models/aspect_bookshelf/phial_lid");    public static final ResourceLocation PHIAL_BODY = new ResourceLocation(Arcana.MODID, "block/models/aspect_bookshelf/phial_body");    public static final ResourceLocation PHIAL_BASE = new ResourceLocation(Arcana.MODID, "block/models/aspect_bookshelf/phial_base");    public static final ResourceLocation PHIAL_TOP = new ResourceLocation(Arcana.MODID, "block/models/aspect_bookshelf/phial_top");    public static final ResourceLocation PHIAL_SIDE = new ResourceLocation(Arcana.MODID, "block/models/aspect_bookshelf/phial_side");    public static final ResourceLocation PHIAL_BOTTOM = new ResourceLocation(Arcana.MODID, "block/models/aspect_bookshelf/phial_bottom");    public static final ResourceLocation PHIAL_CAP = new ResourceLocation(Arcana.MODID, "block/models/aspect_bookshelf/phial_cap");    private final int phialColor = ArcanaConfig.PHIALSHELF_COLOR.get();    public AspectBookshelfBlockEntityRenderer(BlockEntityRendererProvider.Context context) {    }    private void add(VertexConsumer renderer, PoseStack stack, Color color, float x, float y, float z, float u, float v, int lightmap) {        renderer.vertex(stack.last().pose(), x, y, z)                .color(color.getRed() / 255f, color.getGreen() / 255f, color.getBlue() / 255f, color.getAlpha() / 255f)                .uv(u, v)                .uv2(lightmap)                .normal(1, 0, 0)                .endVertex();    }    @Override    public void render(AspectBookshelfBlockEntity tileEntity, float partialTicks, @Nonnull PoseStack poseStack, MultiBufferSource buffer, int combinedLight, int combinedOverlay) {        TextureAtlasSprite spriteLid = Minecraft.getInstance().getTextureAtlas(TextureAtlas.LOCATION_BLOCKS).apply(PHIAL_LID);        TextureAtlasSprite spriteBody = Minecraft.getInstance().getTextureAtlas(TextureAtlas.LOCATION_BLOCKS).apply(PHIAL_BODY);        TextureAtlasSprite spriteBase = Minecraft.getInstance().getTextureAtlas(TextureAtlas.LOCATION_BLOCKS).apply(PHIAL_BASE);        TextureAtlasSprite spriteTop = Minecraft.getInstance().getTextureAtlas(TextureAtlas.LOCATION_BLOCKS).apply(PHIAL_TOP);        TextureAtlasSprite spriteSide = Minecraft.getInstance().getTextureAtlas(TextureAtlas.LOCATION_BLOCKS).apply(PHIAL_SIDE);        TextureAtlasSprite spriteBottom = Minecraft.getInstance().getTextureAtlas(TextureAtlas.LOCATION_BLOCKS).apply(PHIAL_BOTTOM);        TextureAtlasSprite spriteCap = Minecraft.getInstance().getTextureAtlas(TextureAtlas.LOCATION_BLOCKS).apply(PHIAL_CAP);        VertexConsumer builder = buffer.getBuffer(RenderType.translucent());        Quaternionf q = new Quaternionf();        switch (tileEntity.rotation) {            case WEST:                q = Axis.YP.rotationDegrees(90);                break;            case SOUTH:                q = Axis.YP.rotationDegrees(180);                break;            case EAST:                q = Axis.YP.rotationDegrees(270);                break;            case UP:                q = Axis.XP.rotationDegrees(270);                break;            case DOWN:                q = Axis.XP.rotationDegrees(90);                break;            default:                break;        }        if (tileEntity.rotation == Direction.UP || tileEntity.rotation == Direction.DOWN) {            poseStack.translate(0, .5, 0);            poseStack.mulPose(q);            poseStack.translate(0, 0, -.5);            if (tileEntity.rotation == Direction.UP) {                poseStack.translate(0, -1, 0);            }        } else {            poseStack.translate(.5, 0, .5);            poseStack.mulPose(q);            poseStack.translate(-.5, 0, -.5);        }        for (int i = 0; i <= 8; i++) {            if (tileEntity.getItem(i).getItem() instanceof PhialItem) {                poseStack.pushPose();                int slotX = 2 - ((i) % 3);                int slotY = 2 - ((i) / 3);                Color color = PhialItem.getAspect(tileEntity.getItem(i)) != Aspects.EMPTY && phialColor > 0 && phialColor < 6  ?                        new Color(PhialItem.getAspect(tileEntity.getItem(i)).getColorRange().get(5 - phialColor)) : Color.WHITE;                Color c = new Color(color.getRGB()-0x80000000);                float slab = 0f;                if (tileEntity.getBlockState().getValue(FULL_SIZE)) {                    slab = -0.5f;                }                //Base                add(builder, poseStack, c, 0.3125f + (0.3125f * slotX), 0.0625f + (0.3125f * slotY), 0.5625f + slab, spriteBase.getU1(), spriteBase.getV1(), combinedLight);                add(builder, poseStack, c, 0.0625f + (0.3125f * slotX), 0.0625f + (0.3125f * slotY), 0.5625f + slab, spriteBase.getU0(), spriteBase.getV1(), combinedLight);                add(builder, poseStack, c, 0.0625f + (0.3125f * slotX), 0.3125f + (0.3125f * slotY), 0.5625f + slab, spriteBase.getU0(), spriteBase.getV0(), combinedLight);                add(builder, poseStack, c, 0.3125f + (0.3125f * slotX), 0.3125f + (0.3125f * slotY), 0.5625f + slab, spriteBase.getU1(), spriteBase.getV0(), combinedLight);                //Front Handle                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.4375f + slab, spriteLid.getU1(), spriteLid.getV1(), combinedLight);                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.4375f + slab, spriteLid.getU0(), spriteLid.getV1(), combinedLight);                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.4375f + slab, spriteLid.getU0(), spriteLid.getV0(), combinedLight);                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.4375f + slab, spriteLid.getU1(), spriteLid.getV0(), combinedLight);                //Front Cap                add(builder, poseStack, Color.WHITE, 0.28125f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.4375f + slab, spriteCap.getU1(), spriteCap.getV1(), combinedLight);                add(builder, poseStack, Color.WHITE, 0.09375f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.4375f + slab, spriteCap.getU0(), spriteCap.getV1(), combinedLight);                add(builder, poseStack, Color.WHITE, 0.09375f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.4375f + slab, spriteCap.getU0(), spriteCap.getV0(), combinedLight);                add(builder, poseStack, Color.WHITE, 0.28125f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.4375f + slab, spriteCap.getU1(), spriteCap.getV0(), combinedLight);                //Back Handle                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU1(), spriteBody.getV1(), combinedLight);                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU0(), spriteBody.getV1(), combinedLight);                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU0(), spriteBody.getV0(), combinedLight);                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU1(), spriteBody.getV0(), combinedLight);                //Left Handle                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.5000f + slab, spriteSide.getU1(), spriteSide.getV1(), combinedLight);                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.4375f + slab, spriteSide.getU0(), spriteSide.getV1(), combinedLight);                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.4375f + slab, spriteSide.getU0(), spriteSide.getV0(), combinedLight);                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.5000f + slab, spriteSide.getU1(), spriteSide.getV0(), combinedLight);                //Right Handle                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.5000f + slab, spriteSide.getU1(), spriteSide.getV0(), combinedLight);                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.4375f + slab, spriteSide.getU0(), spriteSide.getV0(), combinedLight);                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.4375f + slab, spriteSide.getU0(), spriteSide.getV1(), combinedLight);                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.5000f + slab, spriteSide.getU1(), spriteSide.getV1(), combinedLight);                //Top Handle                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.4375f + slab, spriteTop.getU1(), spriteTop.getV1(), combinedLight);                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.4375f + slab, spriteTop.getU0(), spriteTop.getV1(), combinedLight);                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.5000f + slab, spriteTop.getU0(), spriteTop.getV0(), combinedLight);                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.28125f + (0.3125f * slotY), 0.5000f + slab, spriteTop.getU1(), spriteTop.getV0(), combinedLight);                //Bottom Handle                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.4375f + slab, spriteBottom.getU1(), spriteBottom.getV1(), combinedLight);                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.4375f + slab, spriteBottom.getU0(), spriteBottom.getV1(), combinedLight);                add(builder, poseStack, c, 0.28125f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.5000f + slab, spriteBottom.getU0(), spriteBottom.getV0(), combinedLight);                add(builder, poseStack, c, 0.09375f + (0.3125f * slotX), 0.09375f + (0.3125f * slotY), 0.5000f + slab, spriteBottom.getU1(), spriteBottom.getV0(), combinedLight);                //Left Base                add(builder, poseStack, c, 0.25f + (0.3125f * slotX), 0.125f + (0.3125f * slotY), 0.5625f + slab, spriteBody.getU1(), spriteBody.getV1(), combinedLight);                add(builder, poseStack, c, 0.25f + (0.3125f * slotX), 0.125f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU0(), spriteBody.getV1(), combinedLight);                add(builder, poseStack, c, 0.25f + (0.3125f * slotX), 0.25f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU0(), spriteBody.getV0(), combinedLight);                add(builder, poseStack, c, 0.25f + (0.3125f * slotX), 0.25f + (0.3125f * slotY), 0.5625f + slab, spriteBody.getU1(), spriteBody.getV0(), combinedLight);                //Right Base                add(builder, poseStack, c, 0.125f + (0.3125f * slotX), 0.25f + (0.3125f * slotY), 0.5625f + slab, spriteBody.getU1(), spriteBody.getV0(), combinedLight);                add(builder, poseStack, c, 0.125f + (0.3125f * slotX), 0.25f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU0(), spriteBody.getV0(), combinedLight);                add(builder, poseStack, c, 0.125f + (0.3125f * slotX), 0.125f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU0(), spriteBody.getV1(), combinedLight);                add(builder, poseStack, c, 0.125f + (0.3125f * slotX), 0.125f + (0.3125f * slotY), 0.5625f + slab, spriteBody.getU1(), spriteBody.getV1(), combinedLight);                //Top Base                add(builder, poseStack, c, 0.25f + (0.3125f * slotX), 0.25f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU1(), spriteBody.getV1(), combinedLight);                add(builder, poseStack, c, 0.125f + (0.3125f * slotX), 0.25f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU0(), spriteBody.getV1(), combinedLight);                add(builder, poseStack, c, 0.125f + (0.3125f * slotX), 0.25f + (0.3125f * slotY), 0.5625f + slab, spriteBody.getU0(), spriteBody.getV0(), combinedLight);                add(builder, poseStack, c, 0.25f + (0.3125f * slotX), 0.25f + (0.3125f * slotY), 0.5625f + slab, spriteBody.getU1(), spriteBody.getV0(), combinedLight);                //Bottom Base                add(builder, poseStack, c, 0.125f + (0.3125f * slotX), 0.125f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU1(), spriteBody.getV1(), combinedLight);                add(builder, poseStack, c, 0.25f + (0.3125f * slotX), 0.125f + (0.3125f * slotY), 0.5000f + slab, spriteBody.getU0(), spriteBody.getV1(), combinedLight);                add(builder, poseStack, c, 0.25f + (0.3125f * slotX), 0.125f + (0.3125f * slotY), 0.5625f + slab, spriteBody.getU0(), spriteBody.getV0(), combinedLight);                add(builder, poseStack, c, 0.125f + (0.3125f * slotX), 0.125f + (0.3125f * slotY), 0.5625f + slab, spriteBody.getU1(), spriteBody.getV0(), combinedLight);                poseStack.popPose();            }        }    }}